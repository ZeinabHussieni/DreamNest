// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  userName       String    @unique
  firstName      String?
  lastName       String?
  passwordHash   String
  refreshTokenHash String?
  token          String?  
  profilePicture String?
  coins          Int       @default(0)
  goals          Goal[] 
  posts          Post[]
  likes          PostLike[]   
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Goal {
  id               Int      @id @default(autoincrement())
  title            String
  description      String
  help_text        String?   
  vision_board_url String?  
  progress         Float    @default(0) 
  plans     Plan[] 
  user_id          Int
  user             User       @relation(fields: [user_id], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Plan {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  due_date    DateTime
  completed   Boolean 
  goal_id     Int
  goal        Goal     @relation(fields: [goal_id], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id        Int        @id @default(autoincrement())
  content   String
  user_id   Int
  user      User       @relation(fields: [user_id], references: [id])
  likes     PostLike[] 
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model PostLike {
  id          Int      @id @default(autoincrement()) 
  user_id          Int
  post_id          Int
  user             User       @relation(fields: [user_id], references: [id]) 
  post             Post       @relation(fields: [post_id], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([user_id, post_id])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  email            String       @unique
  userName         String       @unique
  firstName        String?
  lastName         String?
  passwordHash     String
  refreshTokenHash String?
  token            String?  
  profilePicture   String?
  coins            Int          @default(0)

  goals            Goal[] 
  posts            Post[] 
  likes            PostLike[] 
  chatRooms        ChatRoomUser[] 
  messages         Message[]   
  messageReads     MessageRead[] 
  notifications    Notification[] 
  coinLedgers      CoinLedger[]
  coinPurchases    CoinPurchase[]

  helps            Help[]
  helperConnections Connection[] @relation("HelperConnection")
  seekerConnections Connection[] @relation("SeekerConnection")

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Goal {
  id                  Int       @id @default(autoincrement())
  title               String
  description         String
  helpText           String?   
  visionBoardFilename String?  
  progress            Float     @default(0) 
  embedding           Json?     

  plans               Plan[] 
  user_id               Int
  user                User       @relation(fields: [user_id], references: [id])


  connections         Connection[]

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Help {
  id          Int    @id @default(autoincrement())
  description String
  embedding   Json?      
  user_id       Int
  user        User   @relation(fields: [user_id], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([user_id])
}

enum ConnectionDecision {
  pending
  accepted
  rejected
}

model Connection {
  id              Int                 @id @default(autoincrement())
  helper_id       Int
  seeker_id       Int
  goal_id         Int
  similarityScore Float
  status          ConnectionStatus    @default(pending)

  helperDecision  ConnectionDecision  @default(pending)
  seekerDecision  ConnectionDecision  @default(pending)

  chatRoomId      Int?
  chatRoom        ChatRoom?           @relation("ConnectionChatRoom", fields: [chatRoomId], references: [id])

  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  helper          User @relation("HelperConnection", fields: [helper_id], references: [id])
  seeker          User @relation("SeekerConnection", fields: [seeker_id], references: [id])
  goal            Goal @relation(fields: [goal_id], references: [id], onDelete: Cascade)

  @@index([helper_id])
  @@index([seeker_id])
  @@index([goal_id])
  @@unique([helper_id, seeker_id, goal_id])
}



enum ConnectionStatus {
  pending
  accepted
  rejected
}

model Plan {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  due_date    DateTime
  completed   Boolean 
  goal_id     Int
  goal        Goal     @relation(fields: [goal_id], references: [id], onDelete: Cascade) 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id        Int        @id @default(autoincrement())
  content   String
  user_id     Int
  user      User       @relation(fields: [user_id], references: [id])
  likes     PostLike[] 
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model PostLike {
  id          Int      @id @default(autoincrement()) 
  user_id            Int
  post_id          Int
  user             User       @relation(fields: [user_id], references: [id]) 
  post      Post @relation(fields: [post_id], references: [id], onDelete: Cascade)      

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([user_id, post_id])
}

model ChatRoom {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  name          String?

  participants  ChatRoomUser[]
  messages      Message[]

  connections   Connection[]   @relation("ConnectionChatRoom")
}
model ChatRoomUser {
  id        Int      @id @default(autoincrement()) 
  userId      Int
  chatRoomId Int

  user      User     @relation(fields: [userId], references: [id])
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])

  @@unique([userId, chatRoomId])          
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())

  senderId   Int
  sender     User     @relation(fields: [senderId], references: [id])

  chatRoomId Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  reads      MessageRead[]   

  @@index([chatRoomId, createdAt])
}

model MessageRead {
  id        Int      @id @default(autoincrement())
  userId      Int
  messageId Int
  readAt    DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  message   Message  @relation(fields: [messageId], references: [id])
  @@index([userId, readAt])


  @@unique([userId, messageId])
}

model Notification {
  id         Int      @id @default(autoincrement())
  type       String
  userId     Int
  actorId    Int?
  goalId     Int?
  planId     Int?
  postId     Int?
  chatRoomId Int?
  messageId  Int?
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId, read, createdAt])
  @@index([createdAt])
}

enum CoinReason {
  PLAN_COMPLETED
  PLAN_UNCHECKED
  DAILY_DECAY
  PURCHASE
}

model CoinLedger {
  id         Int        @id @default(autoincrement())
  userId     Int
  user       User       @relation(fields: [userId], references: [id])

  delta      Int                    // + or - coins
  reason     CoinReason

  goalId     Int?
  planId     Int?

  purchaseId Int?
  purchase   CoinPurchase? @relation("PurchaseLedger", fields: [purchaseId], references: [id])

  decayDay   DateTime?           

  createdAt  DateTime   @default(now())

  @@index([userId, createdAt])
  @@index([reason, createdAt])
  @@unique([userId, reason, decayDay])
}

enum PurchaseStatus {
  pending
  succeeded
  failed
}

model CoinPurchase {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id])

  coins         Int
  amountCents   Int
  status        PurchaseStatus  @default(pending)

  createdAt     DateTime        @default(now())
  completedAt   DateTime?

  ledgerEntries CoinLedger[]    @relation("PurchaseLedger")
}

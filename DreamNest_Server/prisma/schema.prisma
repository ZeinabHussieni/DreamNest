// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  email            String       @unique
  userName         String       @unique
  firstName        String?
  lastName         String?
  passwordHash     String
  refreshTokenHash String?
  token            String?  
  profilePicture   String?
  coins            Int          @default(0)

  goals            Goal[] 
  posts            Post[] 
  likes            PostLike[] 
  chatRooms        ChatRoomUser[] 
  messages         Message[]   
  messageReads     MessageRead[] 

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Goal {
  id               Int      @id @default(autoincrement())
  title            String
  description      String
  help_text        String?   
  vision_board_url String?  
  progress         Float    @default(0) 
  plans     Plan[] 
  user_id          Int
  user             User       @relation(fields: [user_id], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Plan {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  due_date    DateTime
  completed   Boolean 
  goal_id     Int
  goal        Goal     @relation(fields: [goal_id], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id        Int        @id @default(autoincrement())
  content   String
  user_id   Int
  user      User       @relation(fields: [user_id], references: [id])
  likes     PostLike[] 
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model PostLike {
  id          Int      @id @default(autoincrement()) 
  user_id          Int
  post_id          Int
  user             User       @relation(fields: [user_id], references: [id]) 
  post             Post       @relation(fields: [post_id], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([user_id, post_id])
}

model ChatRoom {
  id            Int            @id @default(autoincrement()) 
  createdAt     DateTime       @default(now())
  name        String?   

  participants  ChatRoomUser[] 
  messages      Message[] 
}

model ChatRoomUser {
  id        Int      @id @default(autoincrement()) 
  userId    Int
  chatRoomId Int

  user      User     @relation(fields: [userId], references: [id])
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])

  @@unique([userId, chatRoomId])          
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())

  senderId   Int
  sender     User     @relation(fields: [senderId], references: [id])

  chatRoomId Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  reads      MessageRead[]   

  @@index([chatRoomId, createdAt])
}

model MessageRead {
  id        Int      @id @default(autoincrement())
  userId    Int
  messageId Int
  readAt    DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  message   Message  @relation(fields: [messageId], references: [id])
  @@index([userId, readAt])


  @@unique([userId, messageId])
}




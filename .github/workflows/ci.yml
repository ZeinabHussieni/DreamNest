name: CI

on:
  push:
    branches: [main, frontend]
  pull_request:
    branches: [main, frontend]

jobs:
  frontend:
    name: Frontend (dreamnest_client)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: dreamnest_client
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: dreamnest_client/package-lock.json

      - run: npm ci
      - run: npm run lint --if-present
      - run: npm run typecheck --if-present
      - run: npm test -- --ci --watchAll=false
      - run: CI=false npm run build

      - name: Docker build (only on main)
        if: github.ref == 'refs/heads/main'
        run: docker build -t dreamnest-frontend:ci -f Dockerfile .
        working-directory: dreamnest_client

  backend:
    name: Backend (DreamNest_Server)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 12345
          POSTGRES_DB: dreamnest
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    env:
      DATABASE_URL: postgresql://postgres:12345@localhost:5432/dreamnest?schema=public
    defaults:
      run:
        working-directory: DreamNest_Server
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: DreamNest_Server/package-lock.json

      - run: npm ci
      - run: npx prisma generate
      - run: npx -y wait-on tcp:localhost:5432 --timeout 90000 --verbose

      - name: DB sanity check
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          PGPASSWORD=12345 psql -h localhost -U postgres -d dreamnest -c "\l"

      - run: npx prisma migrate deploy

 
      - name: Lint (non-blocking)
        run: npm run lint --if-present
        continue-on-error: true

      - run: npm run typecheck --if-present
      - run: npm test -- --ci --watchAll=false --runInBand

      - name: Docker build (only on main)
        if: github.ref == 'refs/heads/main'
        run: docker build -t dreamnest-backend:ci -f Dockerfile .
        working-directory: DreamNest_Server
